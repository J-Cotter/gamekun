defmodule GameKunGPUTest do
  use ExUnit.Case
  import ExUnit.CaptureIO
  doctest GameKun.GPU
  alias GameKun.GPU
  alias GameKun.MMU

  setup do
    gpu = start_supervised!({GPU, nil})
    ram = start_supervised!({GameKun.RAM, nil})
    %{gpu: gpu, ram: ram}
  end

  test "VRAM Read" do
    assert GPU.read(0x8000) == <<0x00>>
    assert GPU.read(0x9FFF) == <<0x00>>

    assert MMU.read(0x9FFF) == <<0x00>>
  end

  test "VRAM Write" do
    assert GPU.read(0x8001) == <<0x00>>
    GPU.write(0x8001, <<0xFF>>)
    assert GPU.read(0x8001) == <<0xFF>>

    assert MMU.read(0x8001) == <<0xFF>>
    MMU.write(0x8001, <<0x00>>)
    assert MMU.read(0x8001) == <<0x00>>
  end

  test "Logo Scanline", %{gpu: gpu} do
    logo = %{
      0x8010 => <<0xF0>>,
      0x8012 => <<0xF0>>,
      0x8014 => <<0xFC>>,
      0x8016 => <<0xFC>>,
      0x8018 => <<0xFC>>,
      0x801A => <<0xFC>>,
      0x801C => <<0xF3>>,
      0x801E => <<0xF3>>,
      0x8020 => <<0x3C>>,
      0x8022 => <<0x3C>>,
      0x8024 => <<0x3C>>,
      0x8026 => <<0x3C>>,
      0x8028 => <<0x3C>>,
      0x802A => <<0x3C>>,
      0x802C => <<0x3C>>,
      0x802E => <<0x3C>>,
      0x8030 => <<0xF0>>,
      0x8032 => <<0xF0>>,
      0x8034 => <<0xF0>>,
      0x8036 => <<0xF0>>,
      0x803C => <<0xF3>>,
      0x803E => <<0xF3>>,
      0x804C => <<0xCF>>,
      0x804E => <<0xCF>>,
      0x8054 => <<0x0F>>,
      0x8056 => <<0x0F>>,
      0x8058 => <<0x3F>>,
      0x805A => <<0x3F>>,
      0x805C => <<0x0F>>,
      0x805E => <<0x0F>>,
      0x8068 => <<0xC0>>,
      0x806A => <<0xC0>>,
      0x806C => <<0x0F>>,
      0x806E => <<0x0F>>,
      0x807C => <<0xF0>>,
      0x807E => <<0xF0>>,
      0x808C => <<0xF3>>,
      0x808E => <<0xF3>>,
      0x809C => <<0xC0>>,
      0x809E => <<0xC0>>,
      0x80A0 => <<0x03>>,
      0x80A2 => <<0x03>>,
      0x80A4 => <<0x03>>,
      0x80A6 => <<0x03>>,
      0x80A8 => <<0x03>>,
      0x80AA => <<0x03>>,
      0x80AC => <<0xFF>>,
      0x80AE => <<0xFF>>,
      0x80B0 => <<0xC0>>,
      0x80B2 => <<0xC0>>,
      0x80B4 => <<0xC0>>,
      0x80B6 => <<0xC0>>,
      0x80B8 => <<0xC0>>,
      0x80BA => <<0xC0>>,
      0x80BC => <<0xC3>>,
      0x80BE => <<0xC3>>,
      0x80CC => <<0xFC>>,
      0x80CE => <<0xFC>>,
      0x8190 => <<0x3C>>,
      0x8192 => <<0x42>>,
      0x8194 => <<0xB9>>,
      0x8196 => <<0xA5>>,
      0x8198 => <<0xB9>>,
      0x819A => <<0xA5>>,
      0x819C => <<0x42>>,
      0x819E => <<0x3C>>,
      0x9904 => <<0x01>>,
      0x9905 => <<0x02>>,
      0x9906 => <<0x03>>,
      0x9907 => <<0x04>>,
      0x9908 => <<0x05>>,
      0x9909 => <<0x06>>,
      0x990A => <<0x07>>,
      0x990B => <<0x08>>,
      0x990C => <<0x09>>,
      0x990D => <<0x0A>>,
      0x990E => <<0x0B>>,
      0x990F => <<0x0C>>,
      0x9910 => <<0x19>>
    }
    # vram = Map.merge(:sys.get_state(gpu).vram, logo)
    # :sys.replace_state(gpu, fn state -> %{state | vram: vram} end)
    # MMU.write(0xFF40, <<0x90>>)
    # state = GPU.render_scanline(%{:sys.get_state(gpu) | vram: vram, line: 64})
    # assert capture_io(fn -> GPU.render_scanline(%{state | line: 65}) end) == " 65\n"
  end
end
